name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_dispatch:
  repository_dispatch:
    types: [seanime_release]
  schedule:
    - cron: "0 0 * * *" # Run daily to check for new releases

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest release of 5rahim/seanime
        id: seanime_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_RELEASE=$(curl -s -H "Authorization: token $GH_TOKEN" \
          https://api.github.com/repos/5rahim/seanime/releases/latest | jq -r .tag_name)
          echo "LATEST_RELEASE=${LATEST_RELEASE}" >> $GITHUB_OUTPUT
          echo "Latest 5rahim/seanime release: ${LATEST_RELEASE}"

      - name: Get latest GHCR tag
        id: get_tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOkEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          PACKAGE_NAME: seanime-docker" # Replace with your package name (usually your image name)
        run: |
          # Query package versions from GitHub API
          TAGS=$(curl -s -H "Authorization: Bearer $GH_TOKEN" "https://api.github.com/users/$OWNER/packages/container/$REPO/versions"| jq -r '.[].metadata.container.tags[]' || echo "null" |grep "v[0-9]" |sort -V |tail -n1)
          # echo "$TAGS
          # null is set if there is an error reading latest tag
          echo "Latest tag: ${TAGS}"
          echo "LATEST_CONTAINER=${TAGS}" >> $GITHUB_OUTPUT

      - name: Check if build is needed
        id: check_build
        run: |
          if [ "${{ steps.seanime_release.outputs.LATEST_RELEASE }}" != ${{ steps.get_tag.outputs.LATEST_CONTAINER }} ]; then
            echo "BUILD_NEEDED=true" >> $GITHUB_OUTPUT
            echo "New version detected. Build needed."
          else
            echo "BUILD_NEEDED=false" >> $GITHUB_OUTPUT
            echo "No new version. Skipping build."
          fi
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        if: steps.check_build.outputs.BUILD_NEEDED == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # set latest tag for master branch
            type=raw,value=latest
            type=raw,value=${{ steps.seanime_release.outputs.LATEST_RELEASE }}
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        if: steps.check_build.outputs.BUILD_NEEDED == 'true'
        id: build-and-push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: "SEANIME_VERSION=${{steps.seanime_release.outputs.LATEST_RELEASE}}"
