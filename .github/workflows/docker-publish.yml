name: Docker

on:
  workflow_dispatch:
  repository_dispatch:
    types: [seanime_release]
  schedule:
    - cron: "0 0 * * *"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

concurrency:
  group: docker-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      latest_release: ${{ steps.release.outputs.LATEST_RELEASE }}
      latest_tag: ${{ steps.release.outputs.TAG }}
      build_needed: ${{ steps.check.outputs.BUILD_NEEDED }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest release and GHCR tag
        id: release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch the latest GitHub release
          LATEST_RELEASE=$(curl -s -H "Authorization: token $GH_TOKEN" \
          https://api.github.com/repos/5rahim/seanime/releases/latest | jq -r .tag_name)

          # Query GHCR for the newest tag that matches vX.Y.Z
          TAGS=$(curl -s -H "Authorization: Bearer $GH_TOKEN" "https://api.github.com/users/$OWNER/packages/container/$REPO/versions"| jq -r '.[].metadata.container.tags[]'|sort -V |grep -o -E '^v([1-9]?[0-9])(\.([1-9]?[0-9])){2}$'|tail -n1)
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_OUTPUT
          echo "TAG=$TAGS" >> $GITHUB_OUTPUT

      - name: Determine if build is needed
        id: check
        run: |
          if [ "${{ steps.release.outputs.LATEST_RELEASE }}" != "${{ steps.release.outputs.TAG }}" ]; then
            echo "BUILD_NEEDED=true" >> $GITHUB_OUTPUT
          else
            echo "BUILD_NEEDED=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: prepare
    if: needs.prepare.outputs.build_needed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.prepare.outputs.latest_release }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            SEANIME_VERSION=${{ needs.prepare.outputs.latest_release }}
